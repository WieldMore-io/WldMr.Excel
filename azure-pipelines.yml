trigger:
- '*'

pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'

variables:
  major: 0
  minor: 1
  revision: 0
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  patch: $[counter(format('{0}.{1}.{2}', variables['Major'], variables['Minor'], variables['Revision']), 0)]
  packageVersion: $(major).$(minor).$(revision).$(patch)-preview
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  nugetApiKey: $(NUGET_API_KEY)
  isNotaPR: $[ne(variables['Build.Reason'], 'PullRequest')]
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    buildPrefix: 'PR - '
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
      buildPrefix: 'master - '
    ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
      buildPrefix: $[ variables['Build.SourceBranchName'] ]


name: '$(buildPrefix)$(major).$(minor).$(revision).$(patch) - '

steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet tool restore'
  inputs:
    command: custom
    custom: tool
    arguments: restore

- task: DotNetCoreCLI@2
  displayName: 'dotnet paket restore'
  inputs:
    command: custom
    custom: paket
    arguments: 'restore'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    projects: tests/**/*.fsproj
    arguments: >-
        -p:Version=$(packageVersion) -p:InformationalVersion=$(packageVersion)-$(Build.SourceVersion) 
        --configuration $(buildConfiguration)

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    arguments: >-
        -p:Version=$(packageVersion) -p:InformationalVersion=$(packageVersion)-$(Build.SourceVersion) 
        --configuration $(buildConfiguration)

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack'
  inputs:
    command: 'custom'
    custom: pack
    projects: src/**/*.fsproj
    arguments: >-
        -p:Version=$(packageVersion) -p:InformationalVersion=$(packageVersion)-$(Build.SourceVersion) 
        --configuration $(buildConfiguration)
        -o $(Build.ArtifactStagingDirectory)

- publish: $(Build.ArtifactStagingDirectory)
  artifact: nupkgs

- task: GithubRelease@0 
  displayName: Create GitHub Release
  condition: and(succeeded(), eq(variables.isNotaPR, true), eq(variables['Build.Repository.Uri'], 'https://github.com/WieldMore-io/WldMr.Excel'))
  inputs:
    gitHubConnection: github.com_PierreYvesR
    repositoryName: WieldMore-io/WldMr.Excel
    tagSource: manual
    addChangeLog: false
    isPreRelease: true
    tag: $(packageVersion)
    assets: |
      $(Build.ArtifactStagingDirectory)

- task: DotNetCoreCLI@2
  displayName: Push to nuget.org
  condition: and(succeeded(), eq(variables.isNotaPR, true), eq(variables['Build.Repository.Uri'], 'https://github.com/WieldMore-io/WldMr.Excel'))
  inputs:
    command: custom
    custom: nuget
    arguments: >
      push $(Build.ArtifactStagingDirectory)/*.nupkg
      -s https://api.nuget.org/v3/index.json
      -k $(nugetApiKey)
